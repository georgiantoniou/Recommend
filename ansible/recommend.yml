---
- name: Kill bucket server
  hosts: bucket
  tags: 
  - kill_bucket
  tasks:
  - name: Kill bucket server       
    ignore_errors: yes
    shell: sudo docker exec {{ CONTAINER_ID }} sudo pkill -f cf_server

- name: Run bucket server
  hosts: bucket
  tags: 
  - run_bucket
  tasks:
  - name: Run bucket server
    command: sudo docker exec {{ CONTAINER_ID }} taskset -c {{ CORES }} /MicroSuite/src/Recommend/cf_service/service/cf_server {{ DATASET }} {{ IP }}:{{ PORT }} {{ THREADS }} {{ MODE }} {{ ID }} {{ NUM_BUCKETS }}
    async: 10000 
    poll: 0
   # register: bucket_output
  #- debug:
  #         var: bucket_output.stdout_lines
  #- name: Checking bucket status
    #async_status:
    #  jid: "{{ bucket_output.ansible_job_id }}"
    #register: job_result
    #until: job_result.finished
    #retries: 10000
    #copy:
    #  content: "{{ bucket_output.stdout }}"
    #  dest: /users/ganton12/bucket_output.txt
       

- name: Copy IP file
  hosts: midtier
  tags:
  - copy_ip_file
  tasks:
  - name: Copy IP file    
    ignore_errors: yes
    shell: sudo docker cp {{ IP_FILE_PATH }} {{ CONTAINER_ID }}:/MicroSuite/src/Recommend/recommender_service/service/lookup_servers_IP.txt


- name: Copy Midtier
  hosts: midtier
  tags:
  - copy_midtier
  tasks:
  - name: Copy Midtier    
    ignore_errors: yes
    shell: sudo docker cp {{ MIDTIER_FILE_PATH }} {{ CONTAINER_ID }}:/MicroSuite/src/Recommend/recommender_service/service/mid_tier_server.cc

- name: Compile Midtier
  hosts: midtier
  tags:
  - compile_midtier
  tasks:
  - name: Make Clean Midtier    
    ignore_errors: yes
    shell: sudo docker exec -w {{ MIDTIER_FILE_PATH }} {{ CONTAINER_ID }} make clean
  - name: Make Midtier
    ignore_errors: yes
    shell: sudo docker exec -w {{ MIDTIER_FILE_PATH }} {{ CONTAINER_ID }} make

- name: Copy Client
  hosts: midtier
  tags:
  - copy_client
  tasks:
  - name: Copy Client    
    ignore_errors: yes
    shell: sudo docker cp {{ CLIENT_FILE_PATH }} {{ CONTAINER_ID }}:/MicroSuite/src/Recommend/load_generator/load_generator_open_loop.cc

- name: Compile Client
  hosts: midtier
  tags:
  - compile_client
  tasks:
  - name: Make Clean Client    
    ignore_errors: yes
    shell: sudo docker exec -w {{ CLIENT_FILE_PATH }} {{ CONTAINER_ID }} make clean
  - name: Make Client
    ignore_errors: yes
    shell: sudo docker exec -w {{ CLIENT_FILE_PATH }} {{ CONTAINER_ID }} make



- name: Kill midtier
  hosts: midtier
  tags:
  - kill_midtier
  tasks:
  - name: Kill midtier    
    ignore_errors: yes
    shell: sudo docker exec {{ CONTAINER_ID }} sudo pkill -f mid_tier_server

- name: Run midtier
  hosts: midtier
  tags: 
  - run_midtier
  tasks:
  - name: Run midtier
    command: sudo docker exec {{ CONTAINER_ID }} taskset -c {{ CORES }} /MicroSuite/src/Recommend/recommender_service/service/mid_tier_server {{ BUCKET_SERVERS }} /MicroSuite/src/Recommend/recommender_service/service/{{ IP_FILE_PATH }} {{ IP }}:{{ PORT }} {{ NETWORK_THREADS }} {{ DISPATCH_THREADS }} {{ RESPONSE_THREADS }}
    async: 10000 
    poll: 0 

    
- name: Copy file
  hosts: midtier
  tags:
  - copy_file
  tasks:
  - name: Copy File    
    ignore_errors: yes
    shell: sudo docker cp {{ SOURCE_FILE_PATH }} {{ CONTAINER_ID }}:{{ DESTINATION_FILE_PATH }} 


- name: prepare dataset
  hosts: 
  - midtier
  tags: 
  - prepare_dataset
  tasks:
  - name: Prepapre Dataset    
    ignore_errors: yes
    shell: sudo docker exec {{ CONTAINER_ID }} bash -c  'rm /home/user_to_movie_ratings_shard*.txt;shards_num=4;split -d --additional-suffix=.txt -l $(($(($(wc -l < /home/user_to_movie_ratings_small_dataset.csv)+shards_num-1))/shards_num)) /home/user_to_movie_ratings_small_dataset.csv /home/user_to_movie_ratings_shard' 

- name: prepare small dataset
  hosts: 
  - midtier
  tags: 
  - prepare_small_dataset
  tasks:
  - name: Prepare Small Dataset    
    ignore_errors: yes
    shell: sudo docker exec {{ CONTAINER_ID }} bash -c  'head -n 10000 /home/user_to_movie_ratings.csv > /home/user_to_movie_ratings_small_dataset.csv' 
    
